name: ci
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [ '14', '13', '12' ]
        os: [ windows-latest, ubuntu-latest ]
    name: Test with Node v${{ matrix.node }} on ${{ matrix.os }}
    steps:
    - name: Tell if project is using npm or yarn
      id: step1
      uses: garronej/github_actions_toolkit@v2.4
      with: 
        action_name: tell_if_project_uses_npm_or_yarn
    - uses: actions/checkout@v2.4.1
    - uses: actions/setup-node@v3.0.0
      with:
        node-version: ${{ matrix.node }}
    - if: steps.step1.outputs.npm_or_yarn == 'yarn'
      run: |
        yarn install --frozen-lockfile                                                                                                                                                                                        
        yarn build
#        yarn test
    - if: steps.step1.outputs.npm_or_yarn == 'npm'
      run: |
        npm ci                                                                                                                                                                                        
        npm run build
#        npm test
  check_if_version_upgraded:
    name: Check if version upgrade
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{steps.step1.outputs.is_upgraded_version }}
    steps:
    - uses: garronej/github_actions_toolkit@v2.4
      id: step1
      with: 
        action_name: is_package_json_version_upgraded

  update_changelog:
    runs-on: ubuntu-latest
    needs: check_if_version_upgraded
    if: needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true'
    steps:
    - uses: garronej/github_actions_toolkit@v2.4
      with:
        action_name: update_changelog
        branch: ${{ github.ref }}
        commit_author_email: ts_ci@github.com

  create_github_release:
    runs-on: ubuntu-latest
    needs: 
      - update_changelog
      - check_if_version_upgraded
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
    - name: Build GitHub release body
      id: step1
      run: |
        if [ "$FROM_VERSION" = "0.0.0" ]; then
            echo "::set-output name=body::ðŸš€"
        else
            echo "::set-output name=body::ðŸ“‹ [CHANGELOG](https://github.com/$GITHUB_REPOSITORY/blob/v$TO_VERSION/CHANGELOG.md)"
        fi
      env: 
        FROM_VERSION: ${{ needs.check_if_version_upgraded.outputs.from_version }}
        TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
    - uses: garronej/action-gh-release@v0.2.0
      with:
        name: Release v${{ needs.check_if_version_upgraded.outputs.to_version }}
        tag_name: v${{ needs.check_if_version_upgraded.outputs.to_version }}
        target_commitish: ${{ github.ref }}
        body: ${{ steps.step1.outputs.body }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

  publish_on_npm:
    runs-on: ubuntu-latest
    needs: 
      - update_changelog
      - check_if_version_upgraded
    steps:
    - uses: actions/checkout@v2.4.1
      with:
        ref: ${{ github.ref }}
    - uses: actions/setup-node@v3.0.0
      with:
        node-version: '15'
    - run: |
        PACKAGE_MANAGER=npm
        if [ -f "./yarn.lock" ]; then
            PACKAGE_MANAGER=yarn
        fi
        if [ "$PACKAGE_MANAGER" = "yarn" ]; then
            yarn install --frozen-lockfile                                                                                                                                                                                        
        else
            npm ci
        fi
        $PACKAGE_MANAGER run build
    - run: npx -y -p denoify@0.6.5 denoify_enable_short_npm_import_path
      env:
        DRY_RUN: "0"
    - name: Publishing on NPM
      run: |
        if [ "$(npm show . version)" = "$VERSION" ]; then
          echo "This version is already published"
          exit 0
        fi
        if [ "$NPM_TOKEN" = "" ]; then
          echo "Can't publish on NPM, You must first create a secret called NPM_TOKEN that contains your NPM auth token. https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets"
          false
        fi
        echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
        npm publish
        rm .npmrc
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}